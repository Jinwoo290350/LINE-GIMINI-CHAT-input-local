const RequestService = require('../services/request');
const GeminiService = require('../services/gemini');
const FileHelper = require('../utils/fileHelper');

class LineController {
  async handleWebhook(req, res) {
    try {
      const events = req.body.events || [];

      for (const event of events) {
        await this.processEvent(event);
      }

      res.status(200).json({ success: true });
    } catch (error) {
      console.error('Webhook error:', error);
      res.status(500).json({ error: error.message });
    }
  }

  async processEvent(event) {
    if (event.type !== 'message') return;

    const { replyToken, message, source } = event;
    const userId = source.userId;

    try {
      // Show loading indicator
      await RequestService.showLoading(userId);

      switch (message.type) {
        case 'text':
          await this.handleTextMessage(replyToken, message, userId);
          break;
        case 'image':
        case 'video':
        case 'audio':
        case 'file':
          await this.handleFileMessage(replyToken, message, userId);
          break;
        default:
          await this.handleUnsupportedMessage(replyToken);
      }
    } catch (error) {
      console.error('Event processing error:', error);
      await RequestService.reply(replyToken, {
        type: 'text',
        text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    }
  }

  async handleTextMessage(replyToken, message, userId) {
    const text = message.text.toLowerCase();

    if (text.includes('help') || text.includes('‡∏ä‡πà‡∏ß‡∏¢')) {
      await RequestService.reply(replyToken, {
        type: 'text',
        text: `ü§ñ LINE Bot ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠\n\nüìé ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå: ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û, PDF, ‡πÄ‡∏™‡∏µ‡∏¢‡∏á, ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠\nüí¨ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ\nüîç ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: help, status, info\n\n‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏£‡∏±‡∏ö!`
      });
    } else if (text.includes('status')) {
      await RequestService.reply(replyToken, {
        type: 'text',
        text: `‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö: ‡∏õ‡∏Å‡∏ï‡∏¥\nüöÄ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå\nü§ñ AI: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\nüìä ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï: ${new Date().toLocaleString('th-TH')}`
      });
    } else {
      // Process general text with Gemini
      const response = await GeminiService.generateContent(message.text);
      await RequestService.reply(replyToken, {
        type: 'text',
        text: response
      });
    }
  }

  async handleFileMessage(replyToken, message, userId) {
    try {
      // Download file from LINE
      const response = await RequestService.getBinary(message.id);
      
      // Generate unique filename
      const fileName = FileHelper.generateFileName(`line_${message.id}`, '.bin');
      const filePath = RequestService.saveFile(response.data, fileName);
      
      // Process file with Gemini
      const prompt = '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î';
      const aiResponse = await GeminiService.processLocalFile(filePath, prompt);
      
      // Get file info
      const fileInfo = FileHelper.getFileInfo(filePath);
      
      // Reply with analysis
      await RequestService.reply(replyToken, [
        {
          type: 'text',
          text: `üìÅ ‡πÑ‡∏ü‡∏•‡πå: ${fileInfo.name}\nüìä ‡∏Ç‡∏ô‡∏≤‡∏î: ${FileHelper.formatFileSize(fileInfo.size)}\n\nüîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:\n${aiResponse}`
        }
      ]);
      
      // Clean up file after processing
      setTimeout(() => {
        FileHelper.deleteFile(filePath);
      }, 5000);
      
    } catch (error) {
      console.error('File processing error:', error);
      await RequestService.reply(replyToken, {
        type: 'text',
        text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'
      });
    }
  }

  async handleUnsupportedMessage(replyToken) {
    await RequestService.reply(replyToken, {
      type: 'text',
      text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡∏£‡∏π‡∏õ, ‡πÄ‡∏™‡∏µ‡∏¢‡∏á, ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠, PDF)'
    });
  }
}

module.exports = new LineController();
